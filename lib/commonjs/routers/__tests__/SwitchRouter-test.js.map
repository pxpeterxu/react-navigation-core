{"version":3,"sources":["SwitchRouter-test.js"],"names":["describe","it","getExampleRouter","navigateTo","getState","expect","routes","index","toEqual","length","resetOnBlur","jumpTo","back","backBehavior","initialRouteName","routeKeyHistory","toBeUndefined","getSubState","routeName","key","pop","popToTop","b2Key","action","type","NavigationActions","NAVIGATE","params1","foo","params2","bar","params","Screen","NestedSwitch","OtherNestedSwitch","nestedRouter","Foo","Bar","otherNestedRouter","router","MainStack","LoginStack","Home","Profile","Form","ForgotPassword","Login","Main","skipInitializeState","navigate","config","PlainScreen","StackA","StackB","StackC","A1","A2","B1","B2","C1","C2","A","screen","path","B","C"],"mappings":"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","sourcesContent":["/* eslint react/display-name:0 */\n\nimport React from 'react';\nimport SwitchRouter from '../SwitchRouter';\nimport StackRouter from '../StackRouter';\nimport * as NavigationActions from '../../NavigationActions';\nimport { getRouterTestHelper } from './routerTestHelper';\n\ndescribe('SwitchRouter', () => {\n  it('resets the route when unfocusing a tab by default', () => {\n    const { navigateTo, getState } = getRouterTestHelper(getExampleRouter());\n\n    navigateTo('A2');\n    expect(getState().routes[0].index).toEqual(1);\n    expect(getState().routes[0].routes.length).toEqual(2);\n\n    navigateTo('B');\n    expect(getState().routes[0].index).toEqual(0);\n    expect(getState().routes[0].routes.length).toEqual(1);\n  });\n\n  it('does not reset the route on unfocus if resetOnBlur is false', () => {\n    const { navigateTo, getState } = getRouterTestHelper(\n      getExampleRouter({ resetOnBlur: false })\n    );\n\n    navigateTo('A2');\n    expect(getState().routes[0].index).toEqual(1);\n    expect(getState().routes[0].routes.length).toEqual(2);\n\n    navigateTo('B');\n    expect(getState().routes[0].index).toEqual(1);\n    expect(getState().routes[0].routes.length).toEqual(2);\n  });\n\n  it('ignores back by default', () => {\n    const { jumpTo, back, getState } = getRouterTestHelper(getExampleRouter());\n\n    jumpTo('B');\n    expect(getState().index).toEqual(1);\n\n    back();\n    expect(getState().index).toEqual(1);\n  });\n\n  it('handles initialRoute backBehavior', () => {\n    const { jumpTo, back, getState } = getRouterTestHelper(\n      getExampleRouter({ backBehavior: 'initialRoute', initialRouteName: 'B' })\n    );\n    expect(getState().routeKeyHistory).toBeUndefined();\n    expect(getState().index).toEqual(1);\n\n    jumpTo('C');\n    expect(getState().index).toEqual(2);\n\n    jumpTo('A');\n    expect(getState().index).toEqual(0);\n\n    back();\n    expect(getState().index).toEqual(1);\n\n    back();\n    expect(getState().index).toEqual(1);\n  });\n\n  it('handles order backBehavior', () => {\n    const { navigateTo, back, getState } = getRouterTestHelper(\n      getExampleRouter({ backBehavior: 'order' })\n    );\n    expect(getState().routeKeyHistory).toBeUndefined();\n\n    navigateTo('C');\n    expect(getState().index).toEqual(2);\n\n    back();\n    expect(getState().index).toEqual(1);\n\n    back();\n    expect(getState().index).toEqual(0);\n\n    back();\n    expect(getState().index).toEqual(0);\n  });\n\n  it('handles history backBehavior', () => {\n    const { navigateTo, back, getState } = getRouterTestHelper(\n      getExampleRouter({ backBehavior: 'history' })\n    );\n    expect(getState().routeKeyHistory).toEqual(['A']);\n\n    navigateTo('B');\n    expect(getState().index).toEqual(1);\n    expect(getState().routeKeyHistory).toEqual(['A', 'B']);\n\n    navigateTo('A');\n    expect(getState().index).toEqual(0);\n    expect(getState().routeKeyHistory).toEqual(['B', 'A']);\n\n    navigateTo('C');\n    expect(getState().index).toEqual(2);\n    expect(getState().routeKeyHistory).toEqual(['B', 'A', 'C']);\n\n    navigateTo('A');\n    expect(getState().index).toEqual(0);\n    expect(getState().routeKeyHistory).toEqual(['B', 'C', 'A']);\n\n    back();\n    expect(getState().index).toEqual(2);\n    expect(getState().routeKeyHistory).toEqual(['B', 'C']);\n\n    back();\n    expect(getState().index).toEqual(1);\n    expect(getState().routeKeyHistory).toEqual(['B']);\n\n    back();\n    expect(getState().index).toEqual(1);\n    expect(getState().routeKeyHistory).toEqual(['B']);\n  });\n\n  it('handles history backBehavior without popping routeKeyHistory when child handles action', () => {\n    const { navigateTo, back, getState, getSubState } = getRouterTestHelper(\n      getExampleRouter({ backBehavior: 'history' })\n    );\n    expect(getState().routeKeyHistory).toEqual(['A']);\n\n    navigateTo('B');\n    expect(getState().index).toEqual(1);\n    expect(getState().routeKeyHistory).toEqual(['A', 'B']);\n\n    navigateTo('B2');\n    expect(getState().index).toEqual(1);\n    expect(getState().routeKeyHistory).toEqual(['A', 'B']);\n    expect(getSubState(2).routeName).toEqual('B2');\n\n    back();\n    expect(getState().index).toEqual(1);\n    // 'B' should not be popped when the child handles the back action\n    expect(getState().routeKeyHistory).toEqual(['A', 'B']);\n    expect(getSubState(2).routeName).toEqual('B1');\n  });\n\n  it('handles back and does not apply back action to inactive child', () => {\n    const { navigateTo, back, getSubState } = getRouterTestHelper(\n      getExampleRouter({\n        backBehavior: 'initialRoute',\n        resetOnBlur: false, // Don't erase the state of substack B when we switch back to A\n      })\n    );\n\n    expect(getSubState(1).routeName).toEqual('A');\n\n    navigateTo('B');\n    navigateTo('B2');\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n\n    navigateTo('A');\n    expect(getSubState(1).routeName).toEqual('A');\n\n    // The back action should not switch to B. It should stay on A\n    back({ key: null });\n    expect(getSubState(1).routeName).toEqual('A');\n  });\n\n  it('handles pop and does not apply pop action to inactive child', () => {\n    const { navigateTo, pop, getSubState } = getRouterTestHelper(\n      getExampleRouter({\n        backBehavior: 'initialRoute',\n        resetOnBlur: false, // Don't erase the state of substack B when we switch back to A\n      })\n    );\n\n    expect(getSubState(1).routeName).toEqual('A');\n\n    navigateTo('B');\n    navigateTo('B2');\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n\n    navigateTo('A');\n    expect(getSubState(1).routeName).toEqual('A');\n\n    // The pop action should not switch to B. It should stay on A\n    pop();\n    expect(getSubState(1).routeName).toEqual('A');\n  });\n\n  it('handles popToTop and does not apply popToTop action to inactive child', () => {\n    const { navigateTo, popToTop, getSubState } = getRouterTestHelper(\n      getExampleRouter({\n        backBehavior: 'initialRoute',\n        resetOnBlur: false, // Don't erase the state of substack B when we switch back to A\n      })\n    );\n\n    expect(getSubState(1).routeName).toEqual('A');\n\n    navigateTo('B');\n    navigateTo('B2');\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n\n    navigateTo('A');\n    expect(getSubState(1).routeName).toEqual('A');\n\n    // The popToTop action should not switch to B. It should stay on A\n    popToTop();\n    expect(getSubState(1).routeName).toEqual('A');\n  });\n\n  it('handles back and does switch to inactive child with matching key', () => {\n    const { navigateTo, back, getSubState } = getRouterTestHelper(\n      getExampleRouter({\n        backBehavior: 'initialRoute',\n        resetOnBlur: false, // Don't erase the state of substack B when we switch back to A\n      })\n    );\n\n    expect(getSubState(1).routeName).toEqual('A');\n\n    navigateTo('B');\n    navigateTo('B2');\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n    const b2Key = getSubState(2).key;\n\n    navigateTo('A');\n    expect(getSubState(1).routeName).toEqual('A');\n\n    // The back action should switch to B and go back from B2 to B1\n    back(b2Key);\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B1');\n  });\n\n  it('handles nested actions', () => {\n    const { navigateTo, getSubState } = getRouterTestHelper(getExampleRouter());\n\n    navigateTo('B', {\n      action: { type: NavigationActions.NAVIGATE, routeName: 'B2' },\n    });\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n  });\n\n  it('handles nested actions and params simultaneously', () => {\n    const { navigateTo, getSubState } = getRouterTestHelper(getExampleRouter());\n\n    const params1 = { foo: 'bar' };\n    const params2 = { bar: 'baz' };\n\n    navigateTo('B', {\n      params: params1,\n      action: {\n        type: NavigationActions.NAVIGATE,\n        routeName: 'B2',\n        params: params2,\n      },\n    });\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(1).params).toEqual(params1);\n    expect(getSubState(2).routeName).toEqual('B2');\n    expect(getSubState(2).params).toEqual(params2);\n  });\n\n  it('order of handling navigate action is correct for nested switchrouters', () => {\n    // router = switch({ Nested: switch({ Foo, Bar }), Other: switch({ Foo }), Bar })\n    // if we are focused on Other and navigate to Bar, what should happen?\n\n    const Screen = () => <div />;\n    const NestedSwitch = () => <div />;\n    const OtherNestedSwitch = () => <div />;\n\n    let nestedRouter = SwitchRouter({ Foo: Screen, Bar: Screen });\n    let otherNestedRouter = SwitchRouter({ Foo: Screen });\n    NestedSwitch.router = nestedRouter;\n    OtherNestedSwitch.router = otherNestedRouter;\n\n    let router = SwitchRouter(\n      {\n        NestedSwitch,\n        OtherNestedSwitch,\n        Bar: Screen,\n      },\n      {\n        initialRouteName: 'OtherNestedSwitch',\n      }\n    );\n\n    const { navigateTo, getSubState } = getRouterTestHelper(router);\n    expect(getSubState(1).routeName).toEqual('OtherNestedSwitch');\n\n    navigateTo('Bar');\n    expect(getSubState(1).routeName).toEqual('Bar');\n\n    navigateTo('NestedSwitch');\n    navigateTo('Bar');\n\n    expect(getSubState(1).routeName).toEqual('NestedSwitch');\n    expect(getSubState(2).routeName).toEqual('Bar');\n  });\n\n  // https://github.com/react-navigation/react-navigation.github.io/issues/117#issuecomment-385597628\n  it('order of handling navigate action is correct for nested stackrouters', () => {\n    const Screen = () => <div />;\n    const MainStack = () => <div />;\n    const LoginStack = () => <div />;\n    MainStack.router = StackRouter({ Home: Screen, Profile: Screen });\n    LoginStack.router = StackRouter({ Form: Screen, ForgotPassword: Screen });\n\n    let router = SwitchRouter(\n      {\n        Home: Screen,\n        Login: LoginStack,\n        Main: MainStack,\n      },\n      {\n        initialRouteName: 'Login',\n      }\n    );\n\n    const { navigateTo, getSubState } = getRouterTestHelper(router);\n    expect(getSubState(1).routeName).toEqual('Login');\n\n    navigateTo('Home');\n    expect(getSubState(1).routeName).toEqual('Home');\n  });\n\n  it('does not error for a nested navigate action in an uninitialized history router', () => {\n    const { navigateTo, getSubState } = getRouterTestHelper(\n      getExampleRouter({ backBehavior: 'history' }),\n      { skipInitializeState: true }\n    );\n\n    navigateTo('B', {\n      action: NavigationActions.navigate({ routeName: 'B2' }),\n    });\n    expect(getSubState(1).routeName).toEqual('B');\n    expect(getSubState(2).routeName).toEqual('B2');\n  });\n});\n\nconst getExampleRouter = (config = {}) => {\n  const PlainScreen = () => <div />;\n  const StackA = () => <div />;\n  const StackB = () => <div />;\n  const StackC = () => <div />;\n\n  StackA.router = StackRouter({\n    A1: PlainScreen,\n    A2: PlainScreen,\n  });\n\n  StackB.router = StackRouter({\n    B1: PlainScreen,\n    B2: PlainScreen,\n  });\n\n  StackC.router = StackRouter({\n    C1: PlainScreen,\n    C2: PlainScreen,\n  });\n\n  const router = SwitchRouter(\n    {\n      A: {\n        screen: StackA,\n        path: '',\n      },\n      B: {\n        screen: StackB,\n        path: 'great/path',\n      },\n      C: {\n        screen: StackC,\n        path: 'pathC',\n      },\n    },\n    {\n      initialRouteName: 'A',\n      ...config,\n    }\n  );\n\n  return router;\n};\n"]}